class t{constructor(t,e,s={}){this.parity=0,this.lastSwap=0,this.swapInterval=0,this.safeHz=0,this.loop=t=>{t-this.lastSwap>=this.swapInterval&&(this.parity^=1,this.lastSwap=t),this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const e=this.parity?this.offB.canvas:this.offA.canvas;this.ctx.drawImage(e,0,0),requestAnimationFrame(this.loop)},this.canvas=t;const i=t.getContext("2d");if(!i)throw new Error("Unable to get 2D rendering context");this.ctx=i,this.text=e,this.opts={font:'32px "Segoe UI", sans-serif',color:"#808080",opacity:.55,minSafeHz:120,marginX:40,marginY:36,lineHeight:48,...s},this.offA=this.createOffscreen(),this.offB=this.createOffscreen(),this.charInfo=this.computeLayout(),this.renderBuffers()}static async detectRefresh(){const t=performance.now();await new Promise(requestAnimationFrame),await new Promise(requestAnimationFrame);const e=performance.now();return Math.round(1e3/((e-t)/2))}createOffscreen(){const t=document.createElement("canvas");t.width=this.canvas.width,t.height=this.canvas.height;const e=t.getContext("2d");if(!e)throw new Error("Unable to create offscreen 2D context");return e}computeLayout(){const t=[],{font:e,marginX:s,marginY:i,lineHeight:a}=this.opts;let n=s,h=i;const o=this.canvas.width-s;this.ctx.font=e,this.ctx.textBaseline="top";for(const e of this.text){if("\n"===e){n=s,h+=a;continue}const i=this.ctx.measureText(e).width;n+i>o&&(n=s,h+=a),t.push({ch:e,x:n,y:h}),n+=i+2}return t}renderBuffers(){const{font:t,color:e,opacity:s}=this.opts;[this.offA,this.offB].forEach((i=>{i.clearRect(0,0,i.canvas.width,i.canvas.height),i.font=t,i.textBaseline="top",i.fillStyle=e,i.globalAlpha=s})),this.charInfo.forEach((({ch:t,x:e,y:s},i)=>{(i%2==0?this.offA:this.offB).fillText(t,e,s)}))}renderStatic(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.font=this.opts.font,this.ctx.textBaseline="top",this.ctx.fillStyle="#ffffff";for(const{ch:t,x:e,y:s}of this.charInfo)this.ctx.fillText(t,e,s)}async run(){const e=await t.detectRefresh();return this.safeHz=2*e,this.safeHz<this.opts.minSafeHz||window.matchMedia("(prefers-reduced-motion: reduce)").matches?(this.renderStatic(),!1):(this.swapInterval=1e3/this.safeHz,requestAnimationFrame(this.loop),!0)}}export{t as TemporalFusionText,t as default};
//# sourceMappingURL=index.esm.js.map
