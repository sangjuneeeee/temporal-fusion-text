/**
 * Temporal-Fusion Text Display Library
 *
 * This library renders text that is only human-readable when frames
 * are temporally integrated, but indecipherable in any single frame or screenshot.
 *
 * MIT License © 2025 sangjuneeeee
 */
export interface FusionOptions {
    /** CSS font string, e.g. "32px sans-serif" */
    font?: string;
    /** Fill style for glyphs, default "#808080" */
    color?: string;
    /** Opacity for glyphs (0.0–1.0), default 0.55 */
    opacity?: number;
    /** Minimum (refreshRate * 2) to enable temporal fusion, default 120 */
    minSafeHz?: number;
    /** Horizontal margin in px, default 40 */
    marginX?: number;
    /** Vertical margin in px, default 36 */
    marginY?: number;
    /** Line height in px for auto-wrapping, default 48 */
    lineHeight?: number;
}
/**
 * Main class that handles temporal-fusion text rendering to a Canvas.
 */
export declare class TemporalFusionText {
    private canvas;
    private ctx;
    private text;
    private opts;
    private offA;
    private offB;
    private charInfo;
    private parity;
    private lastSwap;
    private swapInterval;
    private safeHz;
    /**
     * @param canvas HTMLCanvasElement to render into
     * @param text Text content (supports "\n" for newlines)
     * @param opts  Partial options to customize rendering
     */
    constructor(canvas: HTMLCanvasElement, text: string, opts?: FusionOptions);
    /** Estimate monitor refresh rate (samples two RAF frames). */
    private static detectRefresh;
    /** Create an offscreen canvas context matching the main canvas. */
    private createOffscreen;
    /** Layout each character with auto-wrapping within margins. */
    private computeLayout;
    /** Render odd/even glyph sets into off-screen buffers once. */
    private renderBuffers;
    /** Render static text (fallback when fusion disabled). */
    private renderStatic;
    /** Main animation loop: toggles buffers at calculated interval. */
    private loop;
    /**
     * Start rendering. Returns true if temporal-fusion mode is active,
     * false if fallback static mode is used.
     */
    run(): Promise<boolean>;
}
export default TemporalFusionText;
